using UnityEditor;
using System.Collections.Generic;
using System.IO;
using UnityEngine;

/*Class enabling automatic generation and manual editing of boards*/

public class BoardCreator : MonoBehaviour
{

    //References to prefabs. SerializeField tag to expose fields in inspector without exposing in other scripts.
    [SerializeField] GameObject tileViewPrefab;
    [SerializeField] GameObject tileSelectionIndicatorPrefab;

    Transform marker
    {

        /*Lazy loading to make sure marker exists whenever needed
         *Pattern is implemented via get method which checks if object has been instantiated
         *If not, instantiates*/

        get
        {
            if(_marker == null)
            {
                GameObject instance = Instantiate(tileSelectionIndicatorPrefab) as GameObject;
                _marker = instance.transform;
            }
            return _marker;
        }
    }

    Transform _marker;

    /*Dictionary to map from Point struct to Tile instance
     *Easy to check if tile exists at specified location, and grab reference to Tile.
     */

    Dictionary<Point, Tile> tiles = new Dictionary<Point, Tile>();

    //Define board max dimensions

    [SerializeField] int width = 10;
    [SerializeField] int depth = 10;
    [SerializeField] int height = 8;

    //Field to represent where individual changes to board should be made

    [SerializeField] Point pos;

    //Ability to load previously saved boards. Expose field for level data

    [SerializeField] LevelData levelData;

    //Public methods for growing and shrinking tiles

    public void GrowArea()
    {
        Rect r = RandomRect();
        GrowRect(r);
    }

    public void ShrinkArea()
    {
        Rect r = RandomRect();
        ShrinkRect(r);
    }

    //Generate a rect in a random position within constraints defined above.
    Rect RandomRect()
    {   
        int x = UnityEngine.Random.Range(0, width);
        int y = UnityEngine.Random.Range(0, depth);
        int w = UnityEngine.Random.Range(1, width - x + 1);
        int h = UnityEngine.Random.Range(1, depth - y + 1);

        return new Rect(x, y, w, h);
    }

    //Loop through range of positioned generated by RandomRect, growing or shrinking one tile at a time

    void GrowRect(Rect rect)
    {
        for (int y = (int)rect.yMin; y < (int)rect.yMax; y++)
        {
            for (int x = (int)rect.xMin; x < (int)rect.xMax; x++)
            {
                Point p = new Point(x, y);
                GrowSingle(p);
            }
        }
    }

    void ShrinkRect(Rect rect)
    {
        for (int y = (int)rect.yMin; y < (int)rect.yMax; y++)
        {
            for (int x = (int)rect.xMin; x < (int)rect.xMax; x++)
            {
                Point p = new Point(x, y);
                ShrinkSingle(p);
            }
        }
    }

    /*First get reference from Tile Dictionary
     *If doesn't exist, instantiate a new from prefab*/

    Tile Create()
    {
        GameObject instance = Instantiate(tileViewPrefab) as GameObject;
        instance.transform.parent = transform;
        return instance.GetComponent<Tile>();
    }

    Tile GetOrCreate(Point p)
    {
        if (tiles.ContainsKey(p))
        {
            return tiles[p];
        }

        Tile t = Create();
        t.Load(p, 0);
        tiles.Add(p, t);

        return t;
    }

    //Grow a single tile at position

    void GrowSingle(Point p)
    {
        Tile t = GetOrCreate(p);
        if (t.height < height)         //Must be within map max height
        {
            t.Grow();
        }
    }

    //To shrink, check if tile exists. Do not create if doesn't. 
    //If height becomes zero destroy and remove from Dictionary
    
    void ShrinkSingle(Point p)
    {
        if (tiles.ContainsKey(p))
        {
            Tile t = tiles[p];
            t.Shrink();

            if (t.height <=0)
            {
                tiles.Remove(p);
                DestroyImmediate(t.gameObject);
            }
        }
    }
    
    //Methods for hand modifying level one tile at a time based on pos point field
    
    public void Grow()
    {
        GrowSingle(pos);  
    }

    public void Shrink()
    {
        ShrinkSingle(pos);
    }

    //See which tile will be modified by exposing a method for updating position of Tile Selection Indicator

    public void UpdateMarker()
    {
        Tile t = tiles.ContainsKey(pos) ? tiles[pos] : null;
        marker.localPosition = t != null ? t.center : new Vector3(pos.x, 0, pos.y);
    }

    //Clear board by looping through all and destroying then clearing Dictionary

    public void Clear()
    {
        for (int i=transform.childCount - 1; i>=0; i--)
        {
            DestroyImmediate(transform.GetChild(i).gameObject);
        }
        tiles.Clear();
    }

    //Save the created level
    public void Save()
    {
        string filePath = Application.dataPath + "Resources/Levels";
        if (!Directory.Exists(filePath))
        {
            CreateSaveDirectory();
        }

        LevelData board = ScriptableObject.CreateInstance<LevelData>();
        board.tiles = new List<Vector3>(tiles.Count);
        foreach (Tile t in tiles.Values)
        {
            board.tiles.Add(new Vector3(t.pos.x, t.pos.y, t.height));
        }

        string fileName = string.Format("Assets/Resources/Levels/{1}.asset", filePath, name);
        AssetDatabase.CreateAsset(board, fileName);
    }

    void CreateSaveDirectory()
    {
        string filePath = Application.dataPath + "/Resources";
        if (!Directory.Exists(filePath))
        {
            AssetDatabase.CreateFolder("Assets", "Resources");
        }
        filePath += "/Levels";

        if (!Directory.Exists(filePath))
        {
            AssetDatabase.CreateFolder("Assets/Resources", "Levels");
        }

        AssetDatabase.Refresh();    
    }

    /*Method to load LevelData
     *Link reference to Inspector, then load using method*/

    public void Load()
    {
        Clear();
        if (levelData == null)
        {
            return;
        }

        foreach (Vector3 v in levelData.tiles)
        {
            Tile t = Create();
            t.Load(v);
            tiles.Add(t.pos, t);
        }
    }
}
